# yaml-language-server: $schema=https://raw.githubusercontent.com/jesseduffield/lazygit/master/schema/config.json
git:
  parseEmoji: true
  overrideGpg: true
  paging:
    colorArg: always
    pager: delta --paging=never --diff-so-fancy
customCommands:
  - description: "Create new conventional commit"
    key: "<c-v>"
    context: files
    prompts:
      - type: "menu"
        key: "Type"
        title: "Type of change"
        options:
          - name: "build"
            description: "Changes that affect the build system or external dependencies"
            value: "build"
          - name: "feat"
            description: "A new feature"
            value: "feat"
          - name: "fix"
            description: "A bug fix"
            value: "fix"
          - name: "chore"
            description: "Other changes that don't modify src or test files"
            value: "chore"
          - name: "ci"
            description: "Changes to CI configuration files and scripts"
            value: "ci"
          - name: "docs"
            description: "Documentation only changes"
            value: "docs"
          - name: "perf"
            description: "A code change that improves performance"
            value: "perf"
          - name: "refactor"
            description: "A code change that neither fixes a bug nor adds a feature"
            value: "refactor"
          - name: "revert"
            description: "Reverts a previous commit"
            value: "revert"
          - name: "style"
            description: "Changes that do not affect the meaning of the code"
            value: "style"
          - name: "test"
            description: "Adding missing tests or correcting existing tests"
            value: "test"
      - type: "input"
        title: "Scope"
        key: "Scope"
        initialValue: ""
      - type: "menu"
        key: "Breaking"
        title: "Breaking change"
        options:
          - name: "no"
            value: ""
          - name: "yes"
            value: "!"
      - type: "input"
        title: "message"
        key: "Message"
        initialValue: ""
      - type: "confirm"
        key: "Confirm"
        title: "Commit"
        body: "Are you sure you want to commit?"
    command: "git commit --message '{{.Form.Type}}{{ if .Form.Scope }}({{ .Form.Scope }}){{ end }}{{.Form.Breaking}}: {{.Form.Message}}'"
    loadingText: "Creating conventional commit..."
  - description: "Add empty commit"
    # key: "E"
    context: "commits"
    command: "git commit --allow-empty -m '{{.Form.Message}}'"
    loadingText: "Committing empty commit..."
    prompts:
      - type: "input"
        title: "message"
        key: "Message"
        initialValue: "empty commit"
  - description: "Pull from a specific remote repository"
    # key: "<c-p>"
    context: "files"
    loadingText: "Pulling ..."
    command: git pull {{ .Form.Remote }} {{ .Form.RemoteBranch }}
    prompts:
      - type: "input"
        key: "Remote"
        title: "Remote:"
        suggestions:
          preset: "remotes"
      - type: "input"
        key: "RemoteBranch"
        title: "Remote branch:"
        suggestions:
          command: "git branch --remote --list '{{.Form.Remote}}/*' --format='%(refname:short)' | sed 's/{{.Form.Remote}}\\///'"
  - description: "Push a specific commit (and any preceding)"
    # key: "P"
    command: "git push {{.SelectedRemote.Name}} {{.SelectedLocalCommit.Sha}}:{{.SelectedLocalBranch.Name}}"
    context: "commits"
    loadingText: "Pushing commit..."
    output: log
  - description: "Push to a specific remote repository"
    # key: "<c-P>"
    context: "global"
    loadingText: "Pushing ..."
    prompts:
      - type: "menuFromCommand"
        title: "Which remote repository to push to?"
        command: bash -c "git remote --verbose | grep '/.* (push)'"
        filter: '(?P<remote>.*)\s+(?P<url>.*) \(push\)'
        valueFormat: "{{ .remote }}"
        labelFormat: "{{ .remote | bold | cyan }} {{ .url }}"
      - type: "menu"
        title: "How to push?"
        options:
          - value: "push"
          - value: "push --force-with-lease"
          - value: "push --force"
    command: "git {{index .PromptResponses 1}} {{index .PromptResponses 0}}"
  # Github
  - description: "Open GitHub Pull Request"
    key: "<c-r>"
    command: "gh pr create --fill --web"
    context: "global"
    loadingText: "Creating pull request on GitHub"
  - description: "List and Select GitHub PR for Checkout"
    key: "v"
    context: "localBranches"
    loadingText: "Checking out GitHub Pull Request..."
    command: "gh pr checkout {{.Form.PullRequestNumber}}"
    prompts:
      - type: "menuFromCommand"
        title: "Which PR do you want to check out?"
        key: "PullRequestNumber"
        command: >-
          gh pr list --json number,title,headRefName,updatedAt --template '{{`{{range .}}{{printf "#%v: %s - %s (%s)" .number .title .headRefName (timeago .updatedAt)}}{{end}}`}}'
        filter: "#(?P<number>[0-9]+): (?P<title>.+) - (?P<ref_name>[^ ]+).*"
        valueFormat: "{{.number}}"
        labelFormat: '{{"#" | black | bold}}{{.number | white | bold}} {{.title | yellow | bold}}{{" [" | black | bold}}{{.ref_name | green}}{{"]" | black | bold}}'
  - description: "prune deleted remote branches"
    # key: "<c-p>"
    command: "git remote prune {{.SelectedRemote.Name}}"
    context: "remotes"
    loadingText: "Pruning..."
  # Git Absorb
  - description: "Make Fixup Commit with Git Absorb"
    key: "<c-a>"
    context: "files"
    loadingText: "Fixup ..."
    command: "git-absorb"
    output: log
  - description: "Make Fixup Commit with Git Absorb with base"
    key: "<c-a>"
    context: "commits"
    loadingText: "Fixup ..."
    command: "git-absorb --base {{.SelectedLocalCommit.Sha}}"
    output: log
  # Git Town
  - description: "Git-Town sYnc"
    # key: "Y"
    context: "global"
    command: "git-town sync --all"
    loadingText: "Syncing"
    output: log
  - description: "Git-Town Undo (undo the last git-town command)"
    # key: "U"
    context: "global"
    command: "git-town undo"
    prompts:
      - type: "confirm"
        title: "Undo Last Command"
        body: "Are you sure you want to Undo the last git-town command?"
    loadingText: "Undoing Git-Town Command"
    output: log
  - description: "Git-Town Repo (opens the repo link)"
    key: "!"
    context: "global"
    command: "git-town repo"
    loadingText: "Opening Repo Link"
    output: log
  - description: "Git-Town Append"
    # key: "a"
    context: "localBranches"
    prompts:
      - type: "input"
        title: "Enter name of new child branch. Branches off of '{{.CheckedOutBranch.Name}}'"
        key: "BranchName"
    command: "git-town append {{.Form.BranchName}}"
    loadingText: "Appending"
    output: log
  - description: "Git-Town Hack (creates a new branch)"
    # key: "h"
    context: "localBranches"
    prompts:
      - type: "input"
        title: "Enter name of new branch. Branches off of 'Main'"
        key: "BranchName"
    command: "git-town hack {{.Form.BranchName}}"
    loadingText: "Hacking"
    output: log
  - description: "Git-Town Delete (deletes the current feature branch and sYnc)"
    # key: "K"
    context: "localBranches"
    command: "git-town delete"
    prompts:
      - type: "confirm"
        title: "Delete current feature branch"
        body: "Are you sure you want to delete the current feature branch?"
    loadingText: "Deleting Feature Branch"
    output: log
  - description: "Git-Town Propose (creates a pull request)"
    # key: "p"
    context: "localBranches"
    command: "git-town propose"
    loadingText: "Creating pull request"
    output: log
  - description: "Git-Town Prepend (creates a branch between the curent branch and its parent)"
    # key: "P"
    context: "localBranches"
    prompts:
      - type: "input"
        title: "Enter name of the for child branch between '{{.CheckedOutBranch.Name}}' and its parent"
        key: "BranchName"
    command: "git-town prepend {{.Form.BranchName}}"
    loadingText: "Prepending"
    output: log
  - description: "Git-Town Skip (skip branch with merge conflicts when syncing)"
    # key: "S"
    context: "localBranches"
    command: "git-town skip"
    loadingText: "Skiping"
    output: log
  - description: "Git-Town GO aka:continue (continue after resolving merge conflicts)"
    # key: "G"
    context: "files"
    command: "git-town continue"
    loadingText: "Continuing"
    output: log
  # Generate Commit Message with LLM
  - description: "Generate Commit Message with additional context"
    key: "<c-k>"
    context: "files"
    loadingText: "Generating ..."
    prompts:
      - type: "input"
        title: "Extra Context"
        key: "Extra"
        initialValue: ""
    command: "llm git commit {{ if .Form.Extra }}--extra-context '{{ .Form.Extra }}'{{ end }}"
    output: terminal
  - description: "Prepare Commit Message by LLM"
    key: "<c-l>"
    context: "files"
    loadingText: "Generating ..."
    command: "git commit --no-edit"
  - description: "Pre-commit"
    key: "<c-j>"
    context: "files"
    loadingText: "Running..."
    command: "pre-commit"
    output: terminal
