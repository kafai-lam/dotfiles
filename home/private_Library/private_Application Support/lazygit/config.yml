git:
  parseEmoji: true
  paging:
    colorArg: always
    pager: diff-so-fancy
    # pager: delta --paging=never
customCommands:
  # retrieved from: https://github.com/jesseduffield/lazygit/wiki/Custom-Commands-Compendium#conventional-commit
  - description: "Create new conventional commit"
    key: "Z"
    context: "global"
    prompts:
      - type: "menu"
        key: "Type"
        title: "Type of change"
        options:
          - name: "build"
            description: "Changes that affect the build system or external dependencies"
            value: "build"
          - name: "feat"
            description: "A new feature"
            value: "feat"
          - name: "fix"
            description: "A bug fix"
            value: "fix"
          - name: "chore"
            description: "Other changes that don't modify src or test files"
            value: "chore"
          - name: "ci"
            description: "Changes to CI configuration files and scripts"
            value: "ci"
          - name: "docs"
            description: "Documentation only changes"
            value: "docs"
          - name: "perf"
            description: "A code change that improves performance"
            value: "perf"
          - name: "refactor"
            description: "A code change that neither fixes a bug nor adds a feature"
            value: "refactor"
          - name: "revert"
            description: "Reverts a previous commit"
            value: "revert"
          - name: "style"
            description: "Changes that do not affect the meaning of the code"
            value: "style"
          - name: "test"
            description: "Adding missing tests or correcting existing tests"
            value: "test"
      - type: "input"
        title: "Scope"
        key: "Scope"
        initialValue: ""
      - type: "menu"
        key: "Breaking"
        title: "Breaking change"
        options:
          - name: "no"
            value: ""
          - name: "yes"
            value: "!"
      - type: "input"
        title: "message"
        key: "Message"
        initialValue: ""
      - type: "confirm"
        key: "Confirm"
        title: "Commit"
        body: "Are you sure you want to commit?"
    command: "git commit --message '{{.Form.Type}}{{ if .Form.Scope }}({{ .Form.Scope }}){{ end }}{{.Form.Breaking}}: {{.Form.Message}}'"
    loadingText: "Creating conventional commit..."
  - key: "<c-z>"
    command: "codegpt commit --preview"
    context: "files"
    loadingText: "write commit message by CodeGPT"
    subprocess: true
  - description: "Add empty commit"
    # key: "E"
    context: "commits"
    command: "git commit --allow-empty -m '{{.Form.Message}}'"
    loadingText: "Committing empty commit..."
    prompts:
      - type: "input"
        title: "message"
        key: "Message"
        initialValue: "empty commit"
  - description: "Pull from a specific remote repository"
    # key: "<c-p>"
    context: "files"
    loadingText: "Pulling ..."
    command: git pull {{ .Form.Remote }} {{ .Form.RemoteBranch }}
    prompts:
      - type: "input"
        key: "Remote"
        title: "Remote:"
        suggestions:
          preset: "remotes"
      - type: "input"
        key: "RemoteBranch"
        title: "Remote branch:"
        suggestions:
          command: "git branch --remote --list '{{.Form.Remote}}/*' --format='%(refname:short)' | sed 's/{{.Form.Remote}}\\///'"
  - description: "Check out GitHub Pull Request"
    # key: "v"
    context: "localBranches"
    loadingText: "Checking out GitHub Pull Request..."
    command: "gh pr checkout {{.Form.PullRequestNumber}}"
    prompts:
      - type: "menuFromCommand"
        title: "Which PR do you want to check out?"
        key: "PullRequestNumber"
        command: >-
          gh pr list --json number,title,headRefName,updatedAt
          --template '{{`{{range .}}{{printf "#%v: %s - %s (%s)" .number .title .headRefName (timeago .updatedAt)}}{{end}}`}}'
        filter: "#(?P<number>[0-9]+): (?P<title>.+) - (?P<ref_name>[^ ]+).*"
        valueFormat: "{{.number}}"
        labelFormat: '{{"#" | black | bold}}{{.number | white | bold}} {{.title | yellow | bold}}{{" [" | black | bold}}{{.ref_name | green}}{{"]" | black | bold}}'
  - description: "Push a specific commit (and any preceding)"
    # - key: "<c-l>"
    command: "git push {{.SelectedRemote.Name}} {{.SelectedLocalCommit.Sha}}:{{.SelectedLocalBranch.Name}}"
    context: "commits"
    loadingText: "Pushing commit..."
    stream: true
  - description: "Push to a specific remote repository"
    # key: "<c-p>"
    context: "global"
    loadingText: "Pushing ..."
    prompts:
      - type: "menuFromCommand"
        title: "Which remote repository to push to?"
        command: bash -c "git remote --verbose | grep '/.* (push)'"
        filter: '(?P<remote>.*)\s+(?P<url>.*) \(push\)'
        valueFormat: "{{ .remote }}"
        labelFormat: "{{ .remote | bold | cyan }} {{ .url }}"
      - type: "menu"
        title: "How to push?"
        options:
          - value: "push"
          - value: "push --force-with-lease"
          - value: "push --force"
    command: "git {{index .PromptResponses 1}} {{index .PromptResponses 0}}"
